{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Modular API \u00b6 Modular API is a framework based on FastAPI , Gino and alembic . Advantages \u00b6 Based on FastAPI \u00b6 All key features are availables out of box. Based on Gino too \u00b6 All key features are availables out of box. Provide an interface to use PostGreSQL databases. Integrate Alembic in our own command line interface \u00b6 All key features are availables out of box. autodetect database schema inside modules. Raise an error if the database is not synchronized with the Gino schema at the application's startup. A great Command Line Interface \u00b6 Upgrade your database schema from modules's db schemas. Add modules from github or any git remote. Create a new projet with an included virtual environnment in 1 command ! Disadvantages \u00b6 Only available for PostgreSQL (for now) \u00b6 Unfortunaly Gino is not yet compatible with Mysql but it's on the Gino's roadmap .","title":"Welcome to ModularAPI"},{"location":"#welcome-to-modular-api","text":"Modular API is a framework based on FastAPI , Gino and alembic .","title":"Welcome to Modular API"},{"location":"#advantages","text":"","title":"Advantages"},{"location":"#based-on-fastapi","text":"All key features are availables out of box.","title":"Based on FastAPI"},{"location":"#based-on-gino-too","text":"All key features are availables out of box. Provide an interface to use PostGreSQL databases.","title":"Based on Gino too"},{"location":"#integrate-alembic-in-our-own-command-line-interface","text":"All key features are availables out of box. autodetect database schema inside modules. Raise an error if the database is not synchronized with the Gino schema at the application's startup.","title":"Integrate Alembic in our own command line interface"},{"location":"#a-great-command-line-interface","text":"Upgrade your database schema from modules's db schemas. Add modules from github or any git remote. Create a new projet with an included virtual environnment in 1 command !","title":"A great Command Line Interface"},{"location":"#disadvantages","text":"","title":"Disadvantages"},{"location":"#only-available-for-postgresql-for-now","text":"Unfortunaly Gino is not yet compatible with Mysql but it's on the Gino's roadmap .","title":"Only available for PostgreSQL (for now)"},{"location":"changelog/","text":"0.2.0 \u00b6 Release date: 16/03/2021 add async on_build support refactor the core code add changelog","title":"Changelog"},{"location":"changelog/#020","text":"Release date: 16/03/2021 add async on_build support refactor the core code add changelog","title":"0.2.0"},{"location":"concept/","text":"ModularAPI is designed in 3 parts: The CLI \u00b6 The CLI ( c ommand l ine i nterface) is the tool you use to manage your modular projects and your databases migrations: With the CLI you can : Create a new project (see cli/init ) upgrade the database schema (see cli/db ) Manage modules: add update update remove ect ... The core \u00b6 The core loads modules and ensure the coherence between the database and described schemas. Modules \u00b6 modules are the main concept of the framework, a module is basically a folder with Python scripts : my-project \u2502 .env \u2502 alembic.ini \u2502 requirements.txt \u2502 \u251c\u2500\u2500\u2500db_migrations \u2502 \u2502 env.py \u2502 \u2502 README \u2502 \u2514\u2500\u2500\u2500script.py.mako \u2502 \u251c\u2500\u2500\u2500modules \u2502 \u251c\u2500\u2500\u2500module-a \u2502 \u2502 db.py \u2502 \u2502 main.py \u2502 \u2502 requirements.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500module-b \u2502 db.py \u2502 main.py \u2502 requirements.txt \u2502 \u2514\u2500\u2500\u2500venv \u251c\u2500\u2500\u2500 [...] The main.py is the entrypoint of the module, it have one hook : module hooks \u00b6 on_load function \u00b6 Warning the on_load hook is triggered before the database (gino engine) was initialized. See the part about how to use coroutine as on_load bellow. on_load Example # coding: utf-8 from pathlib import Path from fastapi import FastAPI from fastapi.staticfiles import StaticFiles def on_load ( app : FastAPI ): @app . get ( \"/api/users\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] # serve a spa build (frontend) p = Path ( __file__ ) . parent / \"dist\" app . mount ( \"/user\" , StaticFiles ( directory = p , html = True ), name = \"static\" ) on_load coroutine (async) Example async def on_load ( app : FastAPI ): import asyncio from modularapi.db import db from modularapi.settings import get_setting await db . set_bind ( get_setting () . PG_DNS ) # connect to the database all_users : List [ MyGinoModel ] = await MyGinoModel . query . gino . all () await db . pop_bind () . close () # close the connection print ( all_users ) # [<modules.my_module.db.MyModel object at 0x0000020F8B273310>, ...] await asyncio . sleep ( 10 ) print ( \"done\" ) Info Under the hood it run asyncio.run in a new thread to ensure the on_load hook is finished before continue loading others modules or start the app Warning Given that we have to use thread to correctly handle async on_load hook's end you must use a classic (not async) function if you want to use the Uvicorn/Gunicorn's event loop For now possibles raised exceptions that could happen in the coroutine are not traced back to the main thread (but they are printed in stderr) !","title":"Concept"},{"location":"concept/#the-cli","text":"The CLI ( c ommand l ine i nterface) is the tool you use to manage your modular projects and your databases migrations: With the CLI you can : Create a new project (see cli/init ) upgrade the database schema (see cli/db ) Manage modules: add update update remove ect ...","title":"The CLI"},{"location":"concept/#the-core","text":"The core loads modules and ensure the coherence between the database and described schemas.","title":"The core"},{"location":"concept/#modules","text":"modules are the main concept of the framework, a module is basically a folder with Python scripts : my-project \u2502 .env \u2502 alembic.ini \u2502 requirements.txt \u2502 \u251c\u2500\u2500\u2500db_migrations \u2502 \u2502 env.py \u2502 \u2502 README \u2502 \u2514\u2500\u2500\u2500script.py.mako \u2502 \u251c\u2500\u2500\u2500modules \u2502 \u251c\u2500\u2500\u2500module-a \u2502 \u2502 db.py \u2502 \u2502 main.py \u2502 \u2502 requirements.txt \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500module-b \u2502 db.py \u2502 main.py \u2502 requirements.txt \u2502 \u2514\u2500\u2500\u2500venv \u251c\u2500\u2500\u2500 [...] The main.py is the entrypoint of the module, it have one hook :","title":"Modules"},{"location":"concept/#module-hooks","text":"","title":"module hooks"},{"location":"concept/#on_load-function","text":"Warning the on_load hook is triggered before the database (gino engine) was initialized. See the part about how to use coroutine as on_load bellow. on_load Example # coding: utf-8 from pathlib import Path from fastapi import FastAPI from fastapi.staticfiles import StaticFiles def on_load ( app : FastAPI ): @app . get ( \"/api/users\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] # serve a spa build (frontend) p = Path ( __file__ ) . parent / \"dist\" app . mount ( \"/user\" , StaticFiles ( directory = p , html = True ), name = \"static\" ) on_load coroutine (async) Example async def on_load ( app : FastAPI ): import asyncio from modularapi.db import db from modularapi.settings import get_setting await db . set_bind ( get_setting () . PG_DNS ) # connect to the database all_users : List [ MyGinoModel ] = await MyGinoModel . query . gino . all () await db . pop_bind () . close () # close the connection print ( all_users ) # [<modules.my_module.db.MyModel object at 0x0000020F8B273310>, ...] await asyncio . sleep ( 10 ) print ( \"done\" ) Info Under the hood it run asyncio.run in a new thread to ensure the on_load hook is finished before continue loading others modules or start the app Warning Given that we have to use thread to correctly handle async on_load hook's end you must use a classic (not async) function if you want to use the Uvicorn/Gunicorn's event loop For now possibles raised exceptions that could happen in the coroutine are not traced back to the main thread (but they are printed in stderr) !","title":"on_load function"},{"location":"reference/","text":"Not finished yet ... \u00b6","title":"Reference"},{"location":"reference/#not-finished-yet","text":"","title":"Not finished yet ..."},{"location":"setting/","text":"Description \u00b6 The setting is the provided way to configure the application : Environment configuration \u00b6 In order to easily manage differents types of configurations you can use env variable. Info It is possible to configure multiple env using .env files. Warning Even if you don't want to use .env file you must have one (but you can leave it blank). Linux DOTENV_PATH=dev.env venv/bin/uvicorn modularapi.asgi:app --reload DOTENV_PATH=prod.env venv/bin/gunicorn modularapi.asgi:app -k uvicorn.workers.UvicornWorker Windows TODO TODO DOTENV_PATH \u00b6 The DOTHENV_PATH variable environnment is used to provide a path to the .env file. Warning Set this variable in the .env file will have no effect. Database settings \u00b6 PG_DNS \u00b6 This variable is required . The postgres url to connect to the database, see https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNSTRING for more information. Logging \u00b6 LOG_TO_STDOUT \u00b6 default: True . Enable a logging.basicConfig configuration, under the hood it look like if get_setting () . LOG_TO_STDOUT : logging . basicConfig ( level = get_setting () . LOGGING_LEVEL , format = get_setting () . LOGGING_FMT , ) LOGGING_LEVEL \u00b6 default: logging.INFO . if LOG_TO_STDOUT is set to False this variable will have no effect. under the hood it look like if get_setting () . LOG_TO_STDOUT : logging . basicConfig ( level = get_setting () . LOGGING_LEVEL , format = get_setting () . LOGGING_FMT , ) LOGGING_FMT \u00b6 default: \"%(asctime)s | %(name)-20s | %(levelname)-8s | %(message)s\" . if LOG_TO_STDOUT is set to False this variable will have no effect. under the hood it look like if get_setting () . LOG_TO_STDOUT : logging . basicConfig ( level = get_setting () . LOGGING_LEVEL , format = get_setting () . LOGGING_FMT , )","title":"Setting"},{"location":"setting/#description","text":"The setting is the provided way to configure the application :","title":"Description"},{"location":"setting/#environment-configuration","text":"In order to easily manage differents types of configurations you can use env variable. Info It is possible to configure multiple env using .env files. Warning Even if you don't want to use .env file you must have one (but you can leave it blank). Linux DOTENV_PATH=dev.env venv/bin/uvicorn modularapi.asgi:app --reload DOTENV_PATH=prod.env venv/bin/gunicorn modularapi.asgi:app -k uvicorn.workers.UvicornWorker Windows TODO TODO","title":"Environment configuration"},{"location":"setting/#dotenv_path","text":"The DOTHENV_PATH variable environnment is used to provide a path to the .env file. Warning Set this variable in the .env file will have no effect.","title":"DOTENV_PATH"},{"location":"setting/#database-settings","text":"","title":"Database settings"},{"location":"setting/#pg_dns","text":"This variable is required . The postgres url to connect to the database, see https://www.postgresql.org/docs/13/libpq-connect.html#LIBPQ-CONNSTRING for more information.","title":"PG_DNS"},{"location":"setting/#logging","text":"","title":"Logging"},{"location":"setting/#log_to_stdout","text":"default: True . Enable a logging.basicConfig configuration, under the hood it look like if get_setting () . LOG_TO_STDOUT : logging . basicConfig ( level = get_setting () . LOGGING_LEVEL , format = get_setting () . LOGGING_FMT , )","title":"LOG_TO_STDOUT"},{"location":"setting/#logging_level","text":"default: logging.INFO . if LOG_TO_STDOUT is set to False this variable will have no effect. under the hood it look like if get_setting () . LOG_TO_STDOUT : logging . basicConfig ( level = get_setting () . LOGGING_LEVEL , format = get_setting () . LOGGING_FMT , )","title":"LOGGING_LEVEL"},{"location":"setting/#logging_fmt","text":"default: \"%(asctime)s | %(name)-20s | %(levelname)-8s | %(message)s\" . if LOG_TO_STDOUT is set to False this variable will have no effect. under the hood it look like if get_setting () . LOG_TO_STDOUT : logging . basicConfig ( level = get_setting () . LOGGING_LEVEL , format = get_setting () . LOGGING_FMT , )","title":"LOGGING_FMT"},{"location":"about/otherprojects/","text":"Not finished yet \u00b6","title":"Other projects"},{"location":"about/otherprojects/#not-finished-yet","text":"","title":"Not finished yet"},{"location":"about/question/","text":"Not finished yet \u00b6","title":"Frequently asked questions"},{"location":"about/question/#not-finished-yet","text":"","title":"Not finished yet"},{"location":"cli/db/","text":"Info The DB CLI is almost the same as the Alembic CLI. commands \u00b6 branches \u00b6 ModularAPI db branches Show current branch points. Option Description --verbose or -v Output in verbose mode. current \u00b6 ModularAPI db current Display the current revision for a database. Option Description --verbose or -v Output in verbose mode. downgrade \u00b6 ModularAPI db downgrade <revision> Downgrade to a previous version. Option Description --sql Use the SQL mode. edit \u00b6 ModularAPI db edit <revision> Edit revision script(s) using $EDITOR. heads \u00b6 ModularAPI db heads Show current available heads in the script directory. Option Description --verbose or -v Output in verbose mode. --resolve-dependencies Treat dependency version as down revisions. history \u00b6 ModularAPI db history List changeset scripts in chronological order. Option Description --rev-range String revision range. --verbose or -v Output in verbose mode. --indicate-current Indicate current revision. merge \u00b6 ModularAPI db merge [<rev1>, <rev2>, ..., <revN>] Merge two (or more) revisions together. Creates a new migration file. Option Description --message or -m A string message to apply to the revision. --branch-label A string label name to apply to the new revision. --rev-id Hardcoded revision identifier instead of generating a new one. revision \u00b6 ModularAPI db revision Create a new revision file. Option Description --message or -m A message to apply to the revision. --autogenerate Whether or not to autogenerate the script from the database. --sql Whether to dump the script out as a SQL string. When specified, the script is dumped to stdout. --head Head revision to build the new revision upon a parent. --splice Whether or not the new revision should be made into a new head of its own, is required when the given head is not itself a head. --branche-label String label to apply to the branch --version-path String symbol identifying a specific version path from the configuration. --rev-id Optional revision identifier to use instead of having one generated. show \u00b6 ModularAPI db show <rev1> Show the revision(s) denoted by the given symbol. stamp \u00b6 ModularAPI db stamp <revision=\"head\"> Stamp the revision table with the given revision; don\u2019t run any migrations. Option Description --sql Use the SQL mode. --purge Delete all entries in the version table before stamping. upgrade \u00b6 ModularAPI db upgrade <revision> Upgrade to a later version. Option Description --sql Use the SQL mode.","title":"DataBase"},{"location":"cli/db/#commands","text":"","title":"commands"},{"location":"cli/db/#branches","text":"ModularAPI db branches Show current branch points. Option Description --verbose or -v Output in verbose mode.","title":"branches"},{"location":"cli/db/#current","text":"ModularAPI db current Display the current revision for a database. Option Description --verbose or -v Output in verbose mode.","title":"current"},{"location":"cli/db/#downgrade","text":"ModularAPI db downgrade <revision> Downgrade to a previous version. Option Description --sql Use the SQL mode.","title":"downgrade"},{"location":"cli/db/#edit","text":"ModularAPI db edit <revision> Edit revision script(s) using $EDITOR.","title":"edit"},{"location":"cli/db/#heads","text":"ModularAPI db heads Show current available heads in the script directory. Option Description --verbose or -v Output in verbose mode. --resolve-dependencies Treat dependency version as down revisions.","title":"heads"},{"location":"cli/db/#history","text":"ModularAPI db history List changeset scripts in chronological order. Option Description --rev-range String revision range. --verbose or -v Output in verbose mode. --indicate-current Indicate current revision.","title":"history"},{"location":"cli/db/#merge","text":"ModularAPI db merge [<rev1>, <rev2>, ..., <revN>] Merge two (or more) revisions together. Creates a new migration file. Option Description --message or -m A string message to apply to the revision. --branch-label A string label name to apply to the new revision. --rev-id Hardcoded revision identifier instead of generating a new one.","title":"merge"},{"location":"cli/db/#revision","text":"ModularAPI db revision Create a new revision file. Option Description --message or -m A message to apply to the revision. --autogenerate Whether or not to autogenerate the script from the database. --sql Whether to dump the script out as a SQL string. When specified, the script is dumped to stdout. --head Head revision to build the new revision upon a parent. --splice Whether or not the new revision should be made into a new head of its own, is required when the given head is not itself a head. --branche-label String label to apply to the branch --version-path String symbol identifying a specific version path from the configuration. --rev-id Optional revision identifier to use instead of having one generated.","title":"revision"},{"location":"cli/db/#show","text":"ModularAPI db show <rev1> Show the revision(s) denoted by the given symbol.","title":"show"},{"location":"cli/db/#stamp","text":"ModularAPI db stamp <revision=\"head\"> Stamp the revision table with the given revision; don\u2019t run any migrations. Option Description --sql Use the SQL mode. --purge Delete all entries in the version table before stamping.","title":"stamp"},{"location":"cli/db/#upgrade","text":"ModularAPI db upgrade <revision> Upgrade to a later version. Option Description --sql Use the SQL mode.","title":"upgrade"},{"location":"cli/init/","text":"ModularAPI init <my-project> This command create a new project, init alembic migrations and venv. Example ModularAPI init my-project INFO Initializing a new project at `my-project` ... INFO Creating the venv ... INFO Installing dependancies in the venv ... Collecting pip [...] SUCCESS You can now do `cd my-project` and start using ModularAPI WARNING Don't forget to edit `my-project\\.env` ! SUCCESS Done in 49.391s.","title":"Init"},{"location":"cli/modules/","text":"Modules \u00b6 Modules command can be called by using the following command : ModularAPI modules Warning You must be at the top of your project's hierarchy to use this command ( /path/example/myproject/ ) Danger Don't name your module all. This name is reserved. Add a module \u00b6 ModularAPI modules add <GitRemoteUrl> Add a module from a git remote to ./modules folder. Example ModularAPI modules add https://github.com/Joffref/The-ToolBox- Info Under the hood it performs a git clone. Update a module \u00b6 ModularAPI modules update <ModuleName> Update a module in current ./modules folder from its git remote. Example ModularAPI modules update ModuleA Warning If the git remote is unvailable it will raise an error. Update all modules \u00b6 ModularAPI modules update all Udate all modules in ./modules folder with a git remote configured. Danger Don't name your module all. Remove a module \u00b6 ModularAPI modules remove <ModuleName> Remove a module from current ./modules folder. Remove all modules \u00b6 ModularAPI modules remove all Remove all modules from current ./modules folder. Danger Don't name your module all. List all installed modules \u00b6 ModularAPI modules list List all modules from current ./modules folder. Build your module \u00b6 ModularAPI modules build <ModuleName> Build a module from current ./modules folder. Tip This is usefull if you have a frontend (example : nuxtjs) This usefull if you want to distribute your code.","title":"Modules"},{"location":"cli/modules/#modules","text":"Modules command can be called by using the following command : ModularAPI modules Warning You must be at the top of your project's hierarchy to use this command ( /path/example/myproject/ ) Danger Don't name your module all. This name is reserved.","title":"Modules"},{"location":"cli/modules/#add-a-module","text":"ModularAPI modules add <GitRemoteUrl> Add a module from a git remote to ./modules folder. Example ModularAPI modules add https://github.com/Joffref/The-ToolBox- Info Under the hood it performs a git clone.","title":"Add a module"},{"location":"cli/modules/#update-a-module","text":"ModularAPI modules update <ModuleName> Update a module in current ./modules folder from its git remote. Example ModularAPI modules update ModuleA Warning If the git remote is unvailable it will raise an error.","title":"Update a module"},{"location":"cli/modules/#update-all-modules","text":"ModularAPI modules update all Udate all modules in ./modules folder with a git remote configured. Danger Don't name your module all.","title":"Update all modules"},{"location":"cli/modules/#remove-a-module","text":"ModularAPI modules remove <ModuleName> Remove a module from current ./modules folder.","title":"Remove a module"},{"location":"cli/modules/#remove-all-modules","text":"ModularAPI modules remove all Remove all modules from current ./modules folder. Danger Don't name your module all.","title":"Remove all modules"},{"location":"cli/modules/#list-all-installed-modules","text":"ModularAPI modules list List all modules from current ./modules folder.","title":"List all installed modules"},{"location":"cli/modules/#build-your-module","text":"ModularAPI modules build <ModuleName> Build a module from current ./modules folder. Tip This is usefull if you have a frontend (example : nuxtjs) This usefull if you want to distribute your code.","title":"Build your module"},{"location":"getting_started/fisrtapp/","text":"Not finished yet \u00b6","title":"Create your fisrt app"},{"location":"getting_started/fisrtapp/#not-finished-yet","text":"","title":"Not finished yet"},{"location":"getting_started/installation/","text":"Quick overview of what's inside \u00b6 This tutorial will give you all the needed skills to install, create and deploy modular-API apps. Feel free to ask question on github For any issue please see there Installation \u00b6 Simply install it from pip. pip install modularapi Then, check everything is correctly installed. ModularAPI version Output Modular-API is installed : version X.X.X Create your first project \u00b6 ModularAPI init <project_name> cd <project_name> Now, you are ready to start with ModularAPI. Optional Environment configuration \u00b6 To be able to use Modular-API in different contexts you must configure your DOTENV_PATH and your .env . See the Settings section for details","title":"Install ModularAPI"},{"location":"getting_started/installation/#quick-overview-of-whats-inside","text":"This tutorial will give you all the needed skills to install, create and deploy modular-API apps. Feel free to ask question on github For any issue please see there","title":"Quick overview of what's inside"},{"location":"getting_started/installation/#installation","text":"Simply install it from pip. pip install modularapi Then, check everything is correctly installed. ModularAPI version Output Modular-API is installed : version X.X.X","title":"Installation"},{"location":"getting_started/installation/#create-your-first-project","text":"ModularAPI init <project_name> cd <project_name> Now, you are ready to start with ModularAPI.","title":"Create your first project"},{"location":"getting_started/installation/#optional-environment-configuration","text":"To be able to use Modular-API in different contexts you must configure your DOTENV_PATH and your .env . See the Settings section for details","title":"Optional Environment configuration"},{"location":"getting_started/runapp/","text":"Not finished yet ... \u00b6","title":"Run your first app"},{"location":"getting_started/runapp/#not-finished-yet","text":"","title":"Not finished yet ..."},{"location":"roadmap/cliroad/","text":"Not finished yet \u00b6","title":"CLI"},{"location":"roadmap/cliroad/#not-finished-yet","text":"","title":"Not finished yet"},{"location":"roadmap/projectroad/","text":"Not finished yet \u00b6","title":"Project"},{"location":"roadmap/projectroad/#not-finished-yet","text":"","title":"Not finished yet"}]}